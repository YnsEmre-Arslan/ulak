package com.ars.message.business.concretes;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import org.jsoup.Jsoup;
import org.springframework.stereotype.Service;

import com.ars.message.entities.MailServerConfig;
import com.ars.message.entities.UserMessages;

import jakarta.mail.Address;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.Session;
import jakarta.mail.Store;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMultipart;

@Service
public class MailReaderManager {
	
	
	

    public List<UserMessages> readMails(MailServerConfig config) throws Exception {
    	
    	ArrayList<UserMessages> userMessages = new ArrayList<UserMessages>();
    	
        System.setProperty("mail.debug", "false");

        // Mail sunucu bilgileri ile bağlantı kur ve mailleri çek
        Properties props = new Properties();
        props.put("mail.store.protocol", config.getProtocol()); // IMAP veya IMAPS
        props.put("mail.imap.host", config.getHost());
        props.put("mail.imap.port", config.getPort());

        // SSL/TLS desteği ekleyelim (port 993 için)
        if ("imaps".equalsIgnoreCase(config.getProtocol())) {
            props.put("mail.imap.ssl.enable", "true"); // SSL'yi aktif et
            props.put("mail.imap.ssl.trust", "*");     // Sertifikaya güven
        }

        // Session oluştur
        Session session = Session.getDefaultInstance(props, null);
        session.setDebug(false); // Debug modunu kapat

        // Store nesnesi ile bağlantı kur
        Store store = session.getStore(config.getProtocol());
        store.connect(config.getHost(), config.getUsername(), config.getPassword());

        // Default Folder'a bağlan
        Folder defaultFolder = store.getDefaultFolder();
        Folder[] folders = defaultFolder.list();  // Sunucudaki tüm klasörleri al

        for (Folder folder : folders) {
        	
        	UserMessages userMessage = new UserMessages();
        	
            // Çöp kutusuna (Trash) bakmamak için kontrol yapalım
        	
            if (folder.getName().equalsIgnoreCase("Trash") || folder.getName().equalsIgnoreCase("Deleted Items")) {
                continue; // Trash klasörünü atla
            }

           // System.out.println("Reading folder: " + folder.getName());

            try {
                folder.open(Folder.READ_ONLY);  // Klasörü sadece okuma modunda aç

                // Mailleri al
                Message[] messages = folder.getMessages();

                for (Message message : messages) {
                    
                	// Subject (Konu) yazdırma
                    //System.out.println("Subject: " + message.getSubject());
                    userMessage.setSubject(message.getSubject());

                    Address[] fromAddresses = message.getFrom();
                    if (fromAddresses != null) {
                        for (Address address : fromAddresses) {
                            if (address instanceof InternetAddress) {
                                String email = ((InternetAddress) address).getAddress();
                                userMessage.setFrom(email);
                                // System.out.println("From: " + email);
                            }
                        }
                    }

                    // Alıcıyı (To) yazdırma
                    Address[] toAddresses = message.getRecipients(Message.RecipientType.TO);
                    if (toAddresses != null) {
                        for (Address address : toAddresses) {
                        	
                        	userMessage.setSent(address.toString());
                            
                        }
                    }

                    // CC (Carbon Copy) Alıcılarını yazdırma
                    Address[] ccAddresses = message.getRecipients(Message.RecipientType.CC);
                    if (ccAddresses != null) {
                        for (Address address : ccAddresses) {
                        	
                            System.out.println("CC: " + address.toString());
                        }
                    }

                    // BCC (Blind Carbon Copy) Alıcılarını yazdırma
                    Address[] bccAddresses = message.getRecipients(Message.RecipientType.BCC);
                    if (bccAddresses != null) {
                        for (Address address : bccAddresses) {
                            System.out.println("BCC: " + address.toString());
                        }
                    }

                    // Gönderilme tarihini yazdırma
                    userMessage.setDate(message.getSentDate());
                    
                    // Message ID'yi almak için getHeader metodunu kullanıyoruz
                    String[] messageIds = message.getHeader("Message-ID");
                    if (messageIds != null && messageIds.length > 0) {
                    	
                    	userMessage.setId(messageIds[0]);
                       // System.out.println("Message ID: " + messageIds[0]);
                    }

                    // Mail içeriğini alalım
                    try {
                        String content = getTextFromMessage(message);
                        //System.out.println("Content: " + content);
                        userMessage.setText(content);
                    } catch (Exception e) {
                        System.out.println("Error reading content of message: " + e.getMessage());
                        e.printStackTrace();
                    }


                userMessages.add(userMessage);
                
                }

                folder.close(false); // False: Değişiklik yapmadığınızı belirtir
            } catch (Exception e) {
                System.out.println("Error reading folder: " + folder.getName());
                e.printStackTrace();
            }
        }

        store.close(); // Store'u kapat
        
        userMessages.sort(Comparator.comparing(UserMessages::getDate));

        
        return userMessages;
    }

    private String getTextFromMessage(Message message) throws Exception {
        Object content = message.getContent();
        Set<String> uniqueContents = new HashSet<>(); // Benzersiz içerikleri saklamak için Set

        if (content instanceof String) {
           String plainText = Jsoup.parse((String) content).text(); // HTML etiketlerini temizle
            uniqueContents.add(plainText); // Set'e ekle
        } else if (content instanceof MimeMultipart) {
           extractContentFromMimeMultipart((MimeMultipart) content, uniqueContents);
        }

        // Tüm benzersiz içerikleri birleştir ve döndür
        return String.join("\n", uniqueContents);
    }

    private void extractContentFromMimeMultipart(MimeMultipart mimeMultipart, Set<String> uniqueContents) throws Exception {
        int count = mimeMultipart.getCount();
        for (int i = 0; i < count; i++) {
            var bodyPart = mimeMultipart.getBodyPart(i);
            if (bodyPart.isMimeType("text/plain")) {
                //uniqueContents.add(bodyPart.getContent().toString()); // Plain text içeriği Set'e ekle
            } else if (bodyPart.isMimeType("text/html")) {
                String htmlContent = Jsoup.parse((String) bodyPart.getContent()).text(); // HTML etiketlerini temizle
                uniqueContents.add(htmlContent); // Set'e ekle
            } else if (bodyPart.getContent() instanceof MimeMultipart) {
                extractContentFromMimeMultipart((MimeMultipart) bodyPart.getContent(), uniqueContents);
            }
        }
    }


}





